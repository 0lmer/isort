{"name":"Isort","tagline":"A Python utility / library to sort imports.","body":"![isort](https://raw.github.com/timothycrosley/isort/master/logo.png)\r\n=====\r\n\r\n[![PyPI version](https://badge.fury.io/py/isort.png)](http://badge.fury.io/py/isort)\r\n[![PyPi downloads](https://pypip.in/d/isort/badge.png)](https://crate.io/packages/isort/)\r\n[![Build Status](https://travis-ci.org/timothycrosley/isort.png?branch=master)](https://travis-ci.org/timothycrosley/isort)\r\n\r\nisort your python imports for you so you don't have to.\r\n\r\nisort is a Python utility / library to sort imports alphabetically, and automatically separated into sections.\r\nIt provides a command line utility, Python library, Vim plugin, Sublime plugin, and Kate plugin to quickly sort all your imports.\r\n\r\nBefore isort:\r\n\r\n    from my_lib import Object\r\n\r\n    print(\"Hey\")\r\n\r\n    import os\r\n\r\n    from my_lib import Object3\r\n\r\n    from my_lib import Object2\r\n\r\n    import sys\r\n\r\n    from third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\r\n\r\n    import sys\r\n\r\n    from __future__ import absolute_import\r\n\r\n    from third_party import lib3\r\n\r\n    print(\"yo\")\r\n\r\nAfter isort:\r\n\r\n    from __future__ import absolute_import\r\n\r\n    import os\r\n    import sys\r\n\r\n    from third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\r\n                             lib9, lib10, lib11, lib12, lib13, lib14, lib15)\r\n\r\n    from my_lib import Object, Object2, Object3\r\n\r\n    print(\"Hey\")\r\n    print(\"yo\")\r\n\r\nInstalling isort\r\n===================\r\n\r\nInstalling isort is as simple as:\r\n\r\n    pip install isort\r\n\r\nor if you prefer\r\n\r\n    easy_install isort\r\n\r\nUsing isort\r\n===================\r\n\r\nfrom the command line:\r\n\r\n    isort mypythonfile.py mypythonfile2.py\r\n\r\nor to see the proposed changes without applying them\r\n\r\n    isort mypythonfile.py --diff\r\n\r\nfrom within Python:\r\n\r\n    from isort import SortImports\r\n\r\n    SortImports(\"pythonfile.py\")\r\n\r\nor\r\n\r\n    from isort import SortImports\r\n\r\n    new_contents = SortImports(file_contents=old_contents).output\r\n\r\nfrom within Kate:\r\n\r\n    ctrl+[\r\n\r\nor\r\n\r\n    menu > Python > Sort Imports\r\n\r\nInstalling isort's Kate plugin\r\n===================\r\n\r\nTo install the kate plugin you must either have pate installed or the very latest version of Kate:\r\n\r\n    wget https://raw.github.com/timothycrosley/isort/master/isort_kate_plugin.py --output-document ~/.kde/share/apps/kate/pate/isort_plugin.py\r\n\r\nYou will then need to restart kate and enable Python Plugins as well as the isort plugin itself.\r\n\r\nInstalling isort's Vim plugin\r\n===================\r\n\r\nThe Vim plugin for isort is maintained by @fisadev with installation directions located on the dedicated vim-isort repository\r\nhere: https://github.com/fisadev/vim-isort#installation\r\n\r\nInstalling isort's Sublime plugin\r\n===================\r\n\r\nThe sublime plugin for isort is maintained by @thijsdezoete with installation directions located on the dedicated sublime-text-isort-plugin\r\nrepository here: https://github.com/thijsdezoete/sublime-text-isort-plugin#install\r\n\r\nPlugins for other text editors\r\n===================\r\n\r\nI use Kate, and Kate provides a very nice Python plugin API so I wrote a Kate plugin.\r\nThat said I will enthusiastically accept pull requests that include plugins for other text editors\r\nand add documentation for them as I am notified.\r\n\r\nHow does isort work?\r\n====================\r\n\r\nisort parses specified files for global level import lines (imports outside of try / excepts blocks, functions, etc..)\r\nand puts them all at the top of the file grouped together by the type of import:\r\n\r\n- Future\r\n- Python Standard Library\r\n- Third Party\r\n- Current Python Project\r\n- Explicitly Local (. before import, as in: from . import x)\r\n- Custom Separate Sections (Defined by forced_separate list in configuration file)\r\n\r\nInside of each section the imports are sorted alphabetically. isort automatically removes duplicate python imports,\r\nand wraps long from imports to the specified line length (defaults to 80).\r\n\r\nWhen will isort not work?\r\n======================\r\n\r\nIf you ever have the situation where you need to have a try / except block in the middle of top-level imports or if\r\nyour import order is directly linked to precedence.\r\n\r\nFor example: a common practice in Django settings files is importing * from various settings files to form\r\na new settings file. In this case if any of the imports change order you are changing the settings definition itself.\r\n\r\nHowever, you can configure isort to skip over just these files - or even to force certain imports to the top.\r\n\r\nConfiguring isort\r\n======================\r\n\r\nIf you find the default isort settings do not work well for your project, isort provides several ways to adjust\r\nthe behavior.\r\n\r\nTo configure isort for a single user create a ~/.isort.cfg file:\r\n\r\n    [settings]\r\n    line_length=120\r\n    force_to_top=file1.py,file2.py\r\n    skip=file3.py,file4.py\r\n    known_standard_libary=std,std2\r\n    known_third_party=randomthirdparty\r\n    known_first_party=mylib1,mylib2\r\n    indent='    '\r\n    multi_line_output=3\r\n    length_sort=1\r\n    forced_separate=django.contrib,django.utils\r\n    default_section=FIRSTPARTY\r\n\r\nAdditionally, you can specify project level configuration simply by placing a .isort.cfg file at the root of your\r\nproject. isort will look up to 20 directories up, from the one it is ran, to find a project specific configuration.\r\n\r\nYou can then override any of these settings by using command line arguments, or by passing in override values to the\r\nSortImports class.\r\n\r\nMulti line output modes\r\n======================\r\n\r\nYou will notice above the \"multi_line_output\" setting. This setting defines how from imports wrap when they extend\r\npast the line_length limit and has 4 possible settings:\r\n\r\n0 - Grid\r\n\r\n    from third_party import (lib1, lib2, lib3,\r\n                             lib4, lib5, ...)\r\n\r\n1 - Vertical\r\n\r\n    from third_party import (lib1,\r\n                             lib2,\r\n                             lib3\r\n                             lib4,\r\n                             lib5,\r\n                             ...)\r\n\r\n2 - Hanging Indent\r\n\r\n    from third_party import \\\r\n        lib1, lib2, lib3, \\\r\n        lib4, lib5, lib6\r\n\r\n3 - Vertical Hanging Indent\r\n\r\n    from third_party import (\r\n        lib1,\r\n        lib2,\r\n        lib3,\r\n        lib4,\r\n    )\r\n\r\n4 - Hanging Grid\r\n\r\n    from third_party import (\r\n        lib1, lib2, lib3, lib4,\r\n        lib5, ...)\r\n\r\n5 - Hanging Grid Grouped\r\n\r\n    from third_party import (\r\n        lib1, lib2, lib3, lib4,\r\n        lib5, ...\r\n    )\r\n\r\nOrdering by import length\r\n======================\r\n\r\nisort also makes it easy to sort your imports by length, simply by setting the length_sort option to True.\r\nThis will result in the following output style:\r\n\r\n    from evn.util import (\r\n        Pool,\r\n        Dict,\r\n        Options,\r\n        Constant,\r\n        DecayDict,\r\n        UnexpectedCodePath,\r\n    )\r\n\r\nSkip processing of imports (outside of configuration)\r\n======================\r\n\r\nTo make isort ignore a single import simply add a comment at the end of the import line containing the text 'isort:skip'\r\n\r\n    import module  # isort:skip\r\n\r\nor\r\n\r\n    from xyz import (abc,  # isort:skip\r\n                     yo,\r\n                     hey)\r\n\r\nTo make isort skip an entire file simply add the following to the modules doc string: 'isort:skip_file'\r\n\r\n    \"\"\" my_module.py\r\n        Best module ever\r\n\r\n       isort:skip_file\r\n    \"\"\"\r\n\r\n    import b\r\n    import a\r\n\r\nAdding an import to multiple files\r\n======================\r\n\r\nisort makes it easy to add an import statement across multiple files, while being assured it's correctly placed.\r\n\r\nfrom the command line:\r\n\r\n    isort -a \"from __future__ import print_function\" *.py\r\n\r\nfrom within Kate:\r\n\r\n    ctrl+]\r\n\r\nor:\r\n\r\n    menu > Python > Add Import\r\n\r\nRemoving an import from multiple files\r\n======================\r\n\r\nisort makes it easy to remove an import from multiple files, without having to be concerned with how it was originally\r\nformatted\r\n\r\nfrom the command line:\r\n\r\n    isort -r \"os.system\" *.py\r\n\r\nfrom within Kate:\r\n\r\n    ctrl+shift+]\r\n\r\nor:\r\n\r\n    menu > Python > Remove Import\r\n\r\nUsing isort to verify code\r\n======================\r\n\r\nisort can also be used to used to verify that code is correctly formatted by running it with -c.\r\nAny files that contain incorrectly sorted imports will be outputted to stderr.\r\n\r\n    isort **/*.py -c\r\n\r\n    SUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good! (stdout)\r\n    ERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted. (stderr)\r\n\r\nWhy isort?\r\n======================\r\n\r\nisort simply stands for import sort. It was originally called \"sortImports\" however I got tired of typing the extra\r\ncharacters and came to the realization camelCase is not pythonic.\r\n\r\nI wrote isort because in an organization I used to work in the manager came in one day and decided all code must\r\nhave alphabetically sorted imports. The code base was huge - and he meant for us to do it by hand. However, being a\r\nprogrammer - I'm too lazy to spend 8 hours mindlessly performing a function, but not too lazy to spend 16\r\nhours automating it. I was given permission to open source sortImports and here we are :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}