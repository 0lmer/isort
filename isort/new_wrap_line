wrap_mode = config["multi_line_output"]
print(wrap_mode)
print("line: ", repr(line_separator))
if len(line) > config["line_length"] and wrap_mode != WrapModes.NOQA:  # type: ignore
    line_without_comment = line
    comment = None
    if "#" in line:
        line_without_comment, comment = line.split("#", 1)
    for splitter in ("import ", ".", "as "):
        exp = r"\b" + re.escape(splitter) + r"\b"
        if re.search(exp, line_without_comment) and not line_without_comment.strip().startswith(
            splitter
        ):
            line_parts = re.split(exp, line_without_comment)
            if comment:
                line_parts[-1] = "{}{}  #{}".format(
                    line_parts[-1].strip(),
                    "," if config["include_trailing_comma"] else "",
                    comment,
                )
            next_line = []
            while (len(line) + 2) > (
                config["wrap_length"] or config["line_length"]
            ) and line_parts:
                next_line.append(line_parts.pop())
                line = splitter.join(line_parts)
            if not line:
                line = next_line.pop()

            cont_line = wrap_line(
                config["indent"] + splitter.join(next_line).lstrip(), line_separator, config
            )
            if config["use_parentheses"]:
                if splitter == "as ":
                    output = "{}{}{}".format(line, splitter, cont_line.lstrip())
                else:
                    output = "{}{}({}{}{}{})".format(
                        line,
                        splitter,
                        line_separator,
                        cont_line,
                        "," if config["include_trailing_comma"] and not comment else "",
                        line_separator
                        if wrap_mode
                        in {
                            WrapModes.VERTICAL_HANGING_INDENT,  # type: ignore
                            WrapModes.VERTICAL_GRID_GROUPED,  # type: ignore
                        }
                        else "",
                    )
                lines = output.split(line_separator)
                if config["comment_prefix"] in lines[-1] and lines[-1].endswith(")"):
                    line, comment = lines[-1].split(config["comment_prefix"], 1)
                    lines[-1] = line + ")" + config["comment_prefix"] + comment[:-1]
                return line_separator.join(lines)
            return "{}{}\\{}{}".format(line, splitter, line_separator, cont_line)
elif len(line) > config["line_length"] and wrap_mode == WrapModes.NOQA:  # type: ignore
    if "# NOQA" not in line:
        return "{}{} NOQA".format(line, config["comment_prefix"])

return line
